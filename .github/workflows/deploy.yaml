name: Deploy
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
env:
  tag_name: ${{ github.ref_name }}
jobs:
  checkImageExistsJob:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    outputs:
      hasImage: ${{ steps.image-status-check.outputs.hasImage }}
    steps:
      - name: Check image status
        id: image-status-check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          has_image='false'
          IFS=$'\n'
          arr=($(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/commits/${{ env.tag_name }}/statuses \
            | jq -c '.[] | [.context, .state]'))
          for row in ${arr[@]}; do
            if [[ $(echo $row | jq -r '.[0]') == "BuildImage" && $(echo $row | jq -r '.[1]') == "success" ]]; then
              has_image='true'
            fi
          done
          echo "hasImage=$has_image" >> $GITHUB_OUTPUT
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.tag_name }}
        if: steps.image-status-check.outputs.hasImage != 'true'
      - name: Output error summary and remove tag
        if: steps.image-status-check.outputs.hasImage != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "### This commit's image is not ready for deploy" >> $GITHUB_STEP_SUMMARY
          git push --delete origin ${{ env.tag_name }}
          echo "Remove tag ${{ env.tag_name }}" >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
  checkReleaseCandidateJob:
    runs-on: ubuntu-latest
    environment: prod
    needs: checkImageExistsJob
    if: ${{ needs.checkImageExistsJob.outputs.hasImage == 'true' }}
    outputs:
      isCandidate: ${{ steps.check-rc.outputs.isCandidate }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.tag_name }}
      - name: Fetch tags
        run: git fetch origin tag ${{ env.tag_name }}*
      - name: Check release candidate
        id: check-rc
        run: |
          is_rc='false'
          IFS=$'\n'
          tags=($(git tag --points-at ${{ env.tag_name }}))
          for tag in ${tags[@]}; do
            if [[ $tag == "${{ env.tag_name }}-rc."* ]]; then
              is_rc='true'
            fi
          done
          echo "isCandidate=$is_rc" >> "$GITHUB_OUTPUT"
      - name: Remvoe tag
        if: steps.check-rc.outputs.isCandidate == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "### This commit is not release candidate" >> $GITHUB_STEP_SUMMARY
          git push --delete origin ${{ env.tag_name }}
          echo "Remove tag ${{ env.tag_name }}" >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
  deployJob:
    runs-on: ubuntu-latest
    concurrency: deploy-${{ inputs.environment }}-group
    needs: checkReleaseCandidateJob
    if: ${{ needs.checkReleaseCandidateJob.outputs.isCandidate == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.tag_name }}
      - name: Create Github deployment
        uses: chrnorm/deployment-action@v2
        id: create-deployment
        with:
          token: ${{ github.token }}
          environment: ${{ inputs.environment }}
          auto-merge: false
          ref: ${{ env.tag_name }}
          required-contexts: 'BuildImage'
      - name: Update deployment progress
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
          log-url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          state: 'in_progress'
      - name: Deploy ${{ inputs.environment }}
        id: deploy-step
        run: |
          echo "success"
      - name: Update deployment success
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
          log-url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          state: 'success'
      - name: Update deployment failure
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
          log-url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          state: 'failure'
