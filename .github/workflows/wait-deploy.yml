name: Wait ArgoCD deploy success
on:
  workflow_call:
    inputs:
      ARGO_HOST:
        required: true
        type: string
      ARGO_APP_NAME:
        required: true
        type: string
      RETRY_TIMES:
        required: false
        type: number
        default: 12
      RETRY_WAIT:
        required: false
        type: number
        default: 10
    secrets:
      ARGO_TOKEN:
        required: true
    outputs:
      isDeploySuccess:
        value: ${{ jobs.waitDeploySuccessJob.outputs.isDeploySuccess }}
jobs:
  waitDeploySuccessJob:
    runs-on: ubuntu-latest
    outputs:
      isDeploySuccess: ${{ steps.check-argo-status.outputs.isDeploySuccess }}
    permissions:
      statuses: write
    steps:
      - name: Refresh Argo application
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://${{ inputs.ARGO_HOST }}/api/v1/applications/${{ inputs.ARGO_APP_NAME }}?refresh=true'
          method: 'GET'
          bearerToken: ${{ secrets.ARGO_TOKEN }}
      - name: Check Argo status
        id: check-argo-status
        run: |
          is_deploy_success='false'
          for i in {1..${{ inputs.RETRY_TIMES }}};
          do
            sleep ${{ inputs.RETRY_WAIT }}
            result=$(curl -H "Authorization: Bearer ${{ secrets.ARGO_TOKEN }}" "https://${{ inputs.ARGO_HOST }}/api/v1/applications/${{ inputs.ARGO_APP_NAME }}")
            sync_status=$(echo $result | jq -r '.status.sync.status')
            pod_image_count=$(echo $result | jq -r '.status.summary.images | length')
            echo "sync_status=$sync_status, pod_image_count=$pod_image_count"
            if [[ $sync_status == "Synced" && $pod_image_count == 1 ]]; then
              is_deploy_success='true'
              break
            fi
          done
          echo $is_deploy_success
          echo "isDeploySuccess=$is_deploy_success" >> $GITHUB_OUTPUT
      - name: Run the action # You would run your tests before this using the output to set state/desc
        if: success()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          description: 'Build image and push success, but testing failure'
          context: 'BuildImage'
          state: 'failure'
